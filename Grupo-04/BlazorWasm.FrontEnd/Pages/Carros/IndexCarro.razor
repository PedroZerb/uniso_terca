@page "/Carros"
@inject IRepository<Carro> repositorio

<h3>Index Carro</h3>

<div class="form-group">
    <a class="btn btn-info" href="Carros/Ccadastro"> Novo Carro</a>
    <div class="form-inline">
        <label class="sr-only" for="nome-filtros"> Filtrar</label>
        <input type="text" class="form-control mb-2 mr-sm-2 " placeholder="Filtrar por Marca" />

        <button type="submit" class="btn btn-primary mr-sm-2 mb-2" > Filtrar Por Marca</button>
    </div>
</div>



@if(Carro is not null)
{
    <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Modelo</th> <th>Marca</th> <th>Ano do Modelo</th> <th>Cor do Modelo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Item in Carro)
                {
                <tr>
                    <td>
                        <a class="btn btn-success" href="Carro/Ceditar/@Item.Id">Editar</a>
                        <button class="btn btn-danger" @onclick="@(() => DeletarItem(Item.Id))">Deletar</button>
                    </td>
                    <td>@Item.Modelo</td> <td>@Item.Marca</td> <td>@Item.AnoModelo</td> <td>@Item.Cor</td>
                </tr>
                }
            </tbody>
    </table>
}
else
{
       <h5>Carregando...</h5>
        <img src="https://media.giphy.com/media/l0He4fJxPCbfqv7Xi/giphy.gif" />
}


@code {



    List<Carro> Carro = new List<Carro>();





    //Metodo Executado quando a Pagina é carregada
    protected override async Task OnInitializedAsync()
    {
        Carro = await repositorio.Get();
    }



    private async Task DeletarItem(int Id)
    {
        await repositorio.Delete(Id);

        
        Carro = await repositorio.Get();
    }




}
