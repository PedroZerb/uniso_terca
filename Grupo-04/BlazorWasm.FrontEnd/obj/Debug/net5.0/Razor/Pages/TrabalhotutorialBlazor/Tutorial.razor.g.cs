#pragma checksum "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\Pages\TrabalhotutorialBlazor\Tutorial.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "422934f39cf4164e0149d6ede110a6345ab469e2"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasm.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasm.FrontEnd.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasm.FrontEnd.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasm.FrontEnd.Repositorio;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasmServer.Client.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\danil\OneDrive\Área de Trabalho\WasmSampleDotNet5\BlazorWasm.FrontEnd\_Imports.razor"
using BlazorWasm.Compartilhado.Entidades;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/tutorial")]
    public partial class Tutorial : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h1>Tutorial CRUD</h1>\r\n<br>\r\n\r\n");
            __builder.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabControl>(1);
            __builder.AddAttribute(2, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(3);
                __builder2.AddAttribute(4, "Text", "Listar um Objeto");
                __builder2.AddAttribute(5, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(6, "<br>\r\n        ");
                    __builder3.AddMarkupContent(7, "<h3>Listar Objetos (Ex: IndexCategoria) </h3>\r\n        ");
                    __builder3.AddMarkupContent(8, "<p>Para listamos um objeto em uma página precisamos antes executar uma Task, mas antes Vamos Iniciar uma List em nosso projeto Blazor.</p>\r\n\r\n        ");
                    __builder3.AddMarkupContent(9, "<code class=\"codigo\">\r\n            List&lt;Categoria>\r\n            Categorias = new List&lt;Categoria>\r\n            ();\r\n        </code>\r\n\r\n        ");
                    __builder3.AddMarkupContent(10, "<p>Após ter inicializado nossa lista precisamos trazer ela para nosso ambiente para fazer a listagem com o método abaixo.</p>\r\n\r\n        ");
                    __builder3.AddMarkupContent(11, "<code class=\"codigo\">\r\n            protected override async Task OnInitializedAsync(){\r\n            Categorias = await repositorio.Get();\r\n            }\r\n        </code>\r\n\r\n\r\n        ");
                    __builder3.AddMarkupContent(12, @"<p>
            O “comando” await se torna obrigatório pois não podemos carregar a página sem ele terminar de pegar os dados da lista para exibir.
            <code class=""codigo"">repositorio.Get()</code>, ele irá enviar uma requisição para nossa API pegar os dados que estão no repositório que será usado no nosso &#00064;Foreach, para percorrer nossa lista e mostrar na página.
        </p>");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(13, "\r\n\r\n    ");
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(14);
                __builder2.AddAttribute(15, "Text", "Deletar Objetos");
                __builder2.AddAttribute(16, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(17, "<h3> Deletar Objetos (Ex: IndexCategoria) </h3>\r\n        ");
                    __builder3.AddMarkupContent(18, @"<p>
            Para deletar um objeto seguimos quase a mesma linha que foi usado para exibir uma lista na página, com uma única diferença, podemos ter mais e um item com o mesmo nome então não podemos utilizar o nome como referência para isso utilizamos um ID que será único para cada objeto então não corremos o risco que apagar algo indesejado
            Executaremos um método abaixo em nosso componente Blazor para fazer a requisição a Api para que ela execute a exclusão
        </p><br>
        ");
                    __builder3.AddMarkupContent(19, "<code class=\"codigo\">\r\n            private async Task DeletarItem(int Id)\r\n            {\r\n\r\n            &nbsp;&nbsp; await repositorio.Delete(Id);\r\n\r\n            Categorias = await repositorio.Get();\r\n            }<br><br></code>\r\n\r\n        ");
                    __builder3.AddMarkupContent(20, "<code class=\"codigo-linha\">repositorio.Delete(Id);</code> ");
                    __builder3.AddMarkupContent(21, @"<p>
            Nesta linha ele ira pegar o Id do objeto que gostaríamos de excluir e enviar para api o comando de exclusão, como puderam reparar temos um await pois não poderemos continuar o processo antes de ter a confirmação de exclusão.
            Após ter feito a exclusão do objeto fazemos uma nova requisição a api de listagem para que mostre novamente a lista sem o objeto excluído
        </p>");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(22, "\r\n\r\n    ");
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(23);
                __builder2.AddAttribute(24, "Text", "Cadastrar Objetos");
                __builder2.AddAttribute(25, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(26, "<h3>\r\n            Cadastrar Objetos (Ex: CadastrarCategoria)\r\n        </h3>\r\n        ");
                    __builder3.AddMarkupContent(27, "<p>\r\n            Para o cadastro de um objeto em uma página blazor especificar a criação do formulário\r\n            Onde OnValidSubmit e o evento quando o usuario clicar no botão de salvar\r\n        </p>\r\n\r\n        ");
                    __builder3.AddMarkupContent(28, "<code class=\"codigo\">&lt; Categoria=\"categoria\" OnValidSubmit=\"Create\" /&gt;</code>\r\n\r\n\r\n\r\n        ");
                    __builder3.AddMarkupContent(29, @"<p>
            No cadastro precisamos criar dois métodos diferentes, um avisando que será adicionada um novo objeto com o seguinte comando
            private Categoria categoria = new Categoria();

            E outro será uma task onde ficara ela irá fazer a requisição para api o comando de adição de um novo objeto
        </p>

        ");
                    __builder3.AddMarkupContent(30, "<code class=\"codigo\">\r\n            private async Task Create()\r\n            {\r\n            await repository.Add(categoria);\r\n\r\n            navigationManager.NavigateTo(\"categoria\");\r\n            }\r\n        </code>\r\n\r\n\r\n\r\n        ");
                    __builder3.AddMarkupContent(31, @"<p>
            sendo o mesmo princípio do sistema de exclusão de um objeto com um await para esperar adicionar o objeto pelo nome do que foi inserido no input,
            e mais uma coisa, e necessário volta para a página anterior depois que foi executado, então usamos o comando <code class=""codigo"">navigationManager.NavigateTo(""categoria"");</code>
            para que ela retorne depois que tiver feito o processo
        </p>");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(32, "\r\n\r\n    ");
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(33);
                __builder2.AddAttribute(34, "Text", " Editar Objetos");
                __builder2.AddAttribute(35, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(36, "<h3>\r\n            Editar Objetos (Ex: EditarCategoria)\r\n        </h3>\r\n\r\n        ");
                    __builder3.AddMarkupContent(37, @"<p>
            A parte de edição de um objeto e um pouco mais complicada pois você não pode editar algo que não tem permiçao certo?

            Para a edição utilizaremos o Id novamente para que não ocorra erros na hora da edição

            Então logo de início precisamos adicionar a permissão para a edição do objeto com o seguinte parâmetro
        </p>

        ");
                    __builder3.AddMarkupContent(38, "<code class=\"codigo\">[Parameter] public int CategoriaId { get; set; }</code>\r\n\r\n\r\n        ");
                    __builder3.AddMarkupContent(39, "<p>\r\n            Esse parâmetro nos fornece permissão total sobre o objeto\r\n\r\n            Executaremos primeira a Task onde após clicar no botão de editar ele ira requisitar a informação do objeto que o usuário deseja editar\r\n        </p>\r\n\r\n        ");
                    __builder3.AddMarkupContent(40, @"<code class=""codigo"">
            protected override async Task OnInitializedAsync()
            {
            try
            {
            categoria = await  repository.Get(CategoriaId);
            }
            catch (Exception ex)
            {
            Console.WriteLine(""Erro X: "" + ex.Message);
            }
            }
        </code>
        ");
                    __builder3.AddMarkupContent(41, @"<p>
            Neste método percebemos algumas mudanças em relação os outro onde ele ira fazer uma tentativa para API e se caso ele não conseguir ele ira retornar um erro no console do usuário com a mensagem

            Se tudo tiver dado certo com a primeira Task ele ira seguir para a segunda onde de fato ira editar o objeto criando novamente um método
        </p>


        ");
                    __builder3.AddMarkupContent(42, "<code class=\"codigo\">\r\n            private async Task Edit()\r\n            {\r\n            await repository.Update(categoria);\r\n            navigationManager.NavigateTo(\"categoria\");\r\n            }\r\n        </code>\r\n\r\n        ");
                    __builder3.AddMarkupContent(43, @"<p>Onde o comando <code class=""codigo-linha"">await repository.Update(categoria);</code> ira atualizar de fato o objeto no  repositório com as novas informação e após a edição do objeto o comando navigationManager.NavigateTo(""categoria""); ira retorna a página de categorias</p>");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(44, "\r\n\r\n    ");
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(45);
                __builder2.AddAttribute(46, "Text", "Formulário");
                __builder2.AddAttribute(47, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(48, "<h3>\r\n            Formulário (Ex: FormCategoria)\r\n        </h3>\r\n\r\n        ");
                    __builder3.AddMarkupContent(49, "<p> Essa e uma das páginas mais simples, pois ela somente irá chamar o que nós criamos na página de cadastro de categoria, ela direciona oque o usuario digitar no campo input</p>\r\n        ");
                    __builder3.AddMarkupContent(50, "<code class=\"codigo\">&lt;InputText class=\"form-control\" &#00064;bind-Value=\"&#00064;Categoria.Nome\" /&gt;</code>\r\n        ");
                    __builder3.AddMarkupContent(51, "<p> Especificando como será salvo o objeto com</p>\r\n        ");
                    __builder3.AddMarkupContent(52, "<code class=\"codigo-linha\"> &#00064;bind-Value=” ”</code>.\r\n\r\n        ");
                    __builder3.AddMarkupContent(53, "<p>\r\n            E exibindo o botão de salvar o comando\r\n            Mas para isso ela também precisa de permissão para escrever os dados então novamente utilizamos o parâmetro\r\n        </p>\r\n        ");
                    __builder3.AddMarkupContent(54, "<code class=\"codigo\">[Parameter] public Categoria Categoria { get; set; }</code>\r\n        ");
                    __builder3.AddMarkupContent(55, "<p>Mas também precisamos receber a confirmação de que foi executado com sucesso com um ouro parâmetro</p>\r\n        ");
                    __builder3.AddMarkupContent(56, "<code class=\"codigo\">[Parameter] public EventCallback OnValidSubmit { get; set; }</code>");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(57, "\r\n\r\n    ");
                __builder2.OpenComponent<BlazorWasm.FrontEnd.Pages.TrabalhotutorialBlazor.TabPage>(58);
                __builder2.AddAttribute(59, "Text", "Injeçao de dependencias");
                __builder2.AddAttribute(60, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddMarkupContent(61, "<h3> Injeção de Dependência (Ex: Program.cs)</h3>\r\n\r\n        ");
                    __builder3.AddMarkupContent(62, @"<p>
            Aqui e onde fica a alma do nosso aplicativo Blazor, principalmente ativar nosso acesso ao banco de dados e adicionar o serviço de Http, que será usado para a comunicação entre nosso banco de dados
            Para isso criamos um método
        </p>


        ");
                    __builder3.AddMarkupContent(63, "<code class=\"codigo\">services.AddScoped&lt;IHttpService, HttpService>();</code>\r\n\r\n\r\n        ");
                    __builder3.AddMarkupContent(64, @"<p>
            esse código solicitamos o uso de um serviço Http
            Mas somente isso ainda não faz tudo sozinho precisamos ativar nosso repositório seja ele em memória que seria um repositório fake ou um repositório real
            O comando abaixo ativo o repositório real que no caso não estamos usando
        </p>


        ");
                    __builder3.AddMarkupContent(65, "<code class=\"codigo\">services.AddTransient&lt;IRepository&lt;Categoria>, CategoriaRepository>();</code>\r\n\r\n        ");
                    __builder3.AddMarkupContent(66, "<p>O que foi usado em nossas aulas foram um repositório Fake que quando e desligado a depuração se perde, pois ele fica armazenado na memória Ram, na nossa máquina, com o comando</p>\r\n\r\n        ");
                    __builder3.AddMarkupContent(67, "<code class=\"codigo\">services.AddSingleton&lt;IRepository&lt;Categoria>, RepositoryInMemoryCategoria>();</code>\r\n\r\n        ");
                    __builder3.AddMarkupContent(68, @"<p>
            A mudança no código e bem pequena, mas faz uma grande diferença
            Para cada vez que usuário usar um repositório e necessário especificar neste arquivo, pois senão o repositório não será ativado e irá aparecer erros na IDE.
        </p>");
                }
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(69, "\r\n\r\n\r\n");
            __builder.AddMarkupContent(70, @"<style>
    h1 {
        color: #111;
        font-family: 'Helvetica Neue', sans-serif;
        font-size: 50px;
        font-weight: bold;
        letter-spacing: -1px;
        line-height: 1;
        text-align: center;
    }

    .codigo {
        margin-top: 15px;
        color: purple;
        text-shadow: black 0.1em 0.1em 0.3em;
        font-size:20px;

    }

    .codigo-linha {
        margin-top: 15px;
        color: purple;
        text-shadow: black 0.1em 0.1em 0.3em;
        font-size: 20px;
    }
    p{
        margin:10px;

    }
</style>");
        }
        #pragma warning restore 1998
    }
}
#pragma warning restore 1591
